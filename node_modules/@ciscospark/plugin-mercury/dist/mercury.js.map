{"version":3,"sources":["../src/mercury.js"],"names":["normalReconnectReasons","Mercury","extend","namespace","session","connected","default","type","connecting","socket","localClusterServiceUrls","derived","listening","deps","fn","connect","logger","info","resolve","spark","device","registered","register","then","_connectWithBackoff","disconnect","backoffCall","abort","removeAllListeners","once","close","listen","stopListening","processRegistrationStatusEvent","message","_applyOverrides","event","headers","headerKeys","forEach","keyPath","_attemptConnection","callback","on","_onclose","_onmessage","args","_emit","webSocketUrl","feature","getFeature","isSharingMercuryFeatureEnabled","includes","credentials","getAuthorization","authorization","open","forceCloseDelay","config","pingInterval","pongTimeout","token","trackingId","sessionId","Date","now","catch","reason","code","getNumRetries","retries","refresh","error","reject","call","onComplete","err","undefined","setStrategy","ExponentialStrategy","initialDelay","backoffTimeReset","maxDelay","backoffTimeMax","maxRetries","failAfter","number","delay","Math","min","strategy_","nextBackoffDelay_","process","env","NODE_ENV","debug","stack","start","trigger","_getEventHandlers","eventType","split","name","handlers","handlerName","camelize","s","push","toLowerCase","unset","_reconnect","envelope","data","ENABLE_MERCURY_LOGGING","reduce","promise","handler"],"mappings":"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","file":"mercury.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {deprecated} from 'core-decorators';\nimport {oneFlight} from '@ciscospark/common';\nimport {set} from 'lodash';\nimport S from 'string';\nimport backoff from 'backoff';\nimport Socket from './socket';\nimport {AuthorizationError} from './errors';\n\nconst normalReconnectReasons = [\n  `idle`,\n  `done (forced)`,\n  `pong not received`,\n  `pong mismatch`\n];\n\nconst Mercury = SparkPlugin.extend({\n  namespace: `Mercury`,\n\n  session: {\n    connected: {\n      default: false,\n      type: `boolean`\n    },\n    connecting: {\n      default: false,\n      type: `boolean`\n    },\n    socket: `object`,\n    localClusterServiceUrls: `object`\n  },\n\n  derived: {\n    listening: {\n      deps: [`connected`],\n      fn() {\n        return this.connected;\n      }\n    }\n  },\n\n  @oneFlight\n  connect() {\n    if (this.connected) {\n      this.logger.info(`mercury: already connected, will not connect again`);\n      return Promise.resolve();\n    }\n\n    this.connecting = true;\n    return Promise.resolve(this.spark.device.registered || this.spark.device.register())\n      .then(() => {\n        this.logger.info(`mercury: connecting`);\n\n        return this._connectWithBackoff();\n      });\n  },\n\n  @oneFlight\n  disconnect() {\n    return new Promise((resolve) => {\n      if (this.backoffCall) {\n        this.logger.info(`mercury: aborting connection`);\n        this.backoffCall.abort();\n      }\n\n      if (this.socket) {\n        this.socket.removeAllListeners(`message`);\n        this.once(`offline`, resolve);\n        this.socket.close();\n        return;\n      }\n\n      resolve();\n    });\n  },\n\n  @deprecated(`Mercury#listen(): Use Mercury#connect() instead`)\n  listen() {\n    /* eslint no-invalid-this: [0] */\n    return this.connect();\n  },\n\n  @deprecated(`Mercury#stopListening(): Use Mercury#disconnect() instead`)\n  stopListening() {\n    /* eslint no-invalid-this: [0] */\n    return this.disconnect();\n  },\n\n  processRegistrationStatusEvent(message) {\n    this.localClusterServiceUrls = message.localClusterServiceUrls;\n  },\n\n  _applyOverrides(event) {\n    if (!event.headers) {\n      return;\n    }\n    const headerKeys = Object.keys(event.headers);\n    headerKeys.forEach((keyPath) => {\n      set(event, keyPath, event.headers[keyPath]);\n    });\n  },\n\n  _attemptConnection(callback) {\n    const socket = new Socket();\n    socket.on(`close`, (...args) => this._onclose(...args));\n    socket.on(`message`, (...args) => this._onmessage(...args));\n    socket.on(`sequence-mismatch`, (...args) => this._emit(`sequence-mismatch`, ...args));\n\n    let webSocketUrl = this.spark.device.webSocketUrl;\n\n    this.spark.feature.getFeature(`developer`, `web-shared-mercury`)\n      .then((isSharingMercuryFeatureEnabled) => {\n        if (isSharingMercuryFeatureEnabled) {\n          webSocketUrl += `${webSocketUrl.includes(`?`) ? `&` : `?`}mercuryRegistrationStatus=true&isRegistrationRefreshEnabled=true`;\n        }\n\n        return this.spark.credentials.getAuthorization();\n      })\n      .then((authorization) => socket.open(webSocketUrl, {\n        forceCloseDelay: this.config.forceCloseDelay,\n        pingInterval: this.config.pingInterval,\n        pongTimeout: this.config.pongTimeout,\n        token: authorization,\n        trackingId: `${this.spark.sessionId}_${Date.now()}`,\n        logger: this.logger\n      }))\n      .then(() => {\n        this.socket = socket;\n        callback();\n      })\n      .catch((reason) => {\n        // Suppress connection errors that appear to be network related. This\n        // may end up suppressing metrics during outages, but we might not care\n        // (especially since many of our outages happen in a way that client\n        // metrics can't be trusted).\n        if (reason.code !== 1006 && this.backoffCall.getNumRetries() > 0) {\n          this._emit(`connection_failed`, reason, {retries: this.backoffCall.getNumRetries()});\n        }\n        this.logger.info(`mercury: connection attempt failed`, reason);\n        if (reason instanceof AuthorizationError) {\n          this.logger.info(`mercury: received authorization error, reauthorizing`);\n          return this.spark.refresh()\n            .then(() => callback(reason));\n        }\n\n        return callback(reason);\n      })\n      .catch((reason) => {\n        this.logger.error(`mercury: failed to handle connection failured`, reason);\n        callback(reason);\n      });\n  },\n\n  _connectWithBackoff() {\n    return new Promise((resolve, reject) => {\n      // eslint gets confused about whether or not call is actually used\n      // eslint-disable-next-line prefer-const\n      let call;\n      const onComplete = (err) => {\n        this.connecting = false;\n\n        this.backoffCall = undefined;\n        if (err) {\n          this.logger.info(`mercury: failed to connect after ${call.getNumRetries()} retries; log statement about next retry was inaccurate`);\n          return reject(err);\n        }\n        this.connected = true;\n        this._emit(`online`);\n        return resolve();\n      };\n\n      // eslint-disable-next-line prefer-reflect\n      call = backoff.call((callback) => {\n        this.logger.info(`mercury: executing connection attempt ${call.getNumRetries()}`);\n        this._attemptConnection(callback);\n      }, onComplete);\n\n      call.setStrategy(new backoff.ExponentialStrategy({\n        initialDelay: this.config.backoffTimeReset,\n        maxDelay: this.config.backoffTimeMax\n      }));\n\n      if (this.config.maxRetries) {\n        call.failAfter(this.config.maxRetries);\n      }\n\n      call.on(`abort`, () => {\n        this.logger.info(`mercury: connection aborted`);\n        reject();\n      });\n\n      call.on(`callback`, (err) => {\n        if (err) {\n          const number = call.getNumRetries();\n          const delay = Math.min(call.strategy_.nextBackoffDelay_, this.config.backoffTimeMax);\n\n          this.logger.info(`mercury: failed to connect; attempting retry ${number + 1} in ${delay} ms`);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV === `development`) {\n            this.logger.debug(`mercury: `, err, err.stack);\n          }\n          return;\n        }\n        this.logger.info(`mercury: connected`);\n      });\n\n      call.start();\n\n      this.backoffCall = call;\n    });\n  },\n\n  _emit(...args) {\n    try {\n      this.trigger(...args);\n    }\n    catch (error) {\n      this.logger.error(`mercury: error occurred in event handler`, error);\n    }\n  },\n\n  _getEventHandlers(eventType) {\n    const [namespace, name] = eventType.split(`.`);\n    const handlers = [];\n\n    if (!this.spark[namespace]) {\n      return handlers;\n    }\n\n    const handlerName = S(`process_${name}_event`).camelize().s;\n    if (this.spark[namespace][handlerName]) {\n      handlers.push({\n        name: handlerName,\n        namespace\n      });\n    }\n    return handlers;\n  },\n\n  _onclose(event) {\n    // I don't see any way to avoid the complexity or statement count in here.\n    /* eslint complexity: [0] */\n\n    try {\n      const reason = event.reason && event.reason.toLowerCase();\n      this.socket.removeAllListeners();\n      this.unset(`socket`);\n      this.connected = false;\n      this._emit(`offline`, event);\n\n      switch (event.code) {\n      case 1003:\n        // metric: disconnect\n        this.logger.info(`mercury: Mercury service rejected last message; will not reconnect: ${event.reason}`);\n        this._emit(`offline.permanent`, event);\n        break;\n      case 4000:\n        // metric: disconnect\n        this.logger.info(`mercury: socket replaced; will not reconnect`);\n        this._emit(`offline.replaced`, event);\n        break;\n      case 1001:\n      case 1005:\n      case 1006:\n      case 1011:\n        this.logger.info(`mercury: socket disconnected; reconnecting`);\n        this._emit(`offline.transient`, event);\n        this._reconnect();\n        // metric: disconnect\n        // if (code == 1011 && rason !== ping error) metric: unexpected disconnect\n        break;\n      case 1000:\n        if (normalReconnectReasons.includes(reason)) {\n          this.logger.info(`mercury: socket disconnected; reconnecting`);\n          this._emit(`offline.transient`, event);\n          this._reconnect();\n          // metric: disconnect\n          // if (reason === done forced) metric: force closure\n        }\n        else {\n          this.logger.info(`mercury: socket disconnected; will not reconnect`);\n          this._emit(`offline.permanent`, event);\n        }\n        break;\n      default:\n        this.logger.info(`mercury: socket disconnected unexpectedly; will not reconnect`);\n        // unexpected disconnect\n        this._emit(`offline.permanent`, event);\n      }\n    }\n    catch (error) {\n      this.logger.error(`mercury: error occurred in close handler`, error);\n    }\n  },\n\n  _onmessage(event) {\n    const envelope = event.data;\n    if (process.env.ENABLE_MERCURY_LOGGING) {\n      this.logger.debug(`mercury: message envelope: `, envelope);\n    }\n\n    const data = envelope.data;\n    this._applyOverrides(data);\n    return this._getEventHandlers(data.eventType)\n      .reduce((promise, handler) => promise.then(() => {\n        const {namespace, name} = handler;\n        return new Promise((resolve) => resolve(this.spark[namespace][name](data)))\n          .catch((reason) => this.logger.error(`mercury: error occurred in autowired event handler for ${data.eventType}`, reason));\n      }), Promise.resolve())\n      .then(() => {\n        this._emit(`event`, event.data);\n        const [namespace] = data.eventType.split(`.`);\n        this._emit(`event:${namespace}`, envelope);\n        this._emit(`event:${data.eventType}`, envelope);\n      })\n      .catch((reason) => {\n        this.logger.error(`mercury: error occurred processing socket message`, reason);\n      });\n  },\n\n  _reconnect() {\n    this.logger.info(`mercury: reconnecting`);\n    return this.connect();\n  }\n});\n\nexport default Mercury;\n"]}